#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }

template <typename T, typename V>
void __print(const pair<T, V> &x)
{
	cerr << '{';
	__print(x.first);
	cerr << ',';
	__print(x.second);
	cerr << '}';
}
template <typename T>
void __print(const T &x)
{
	int f = 0;
	cerr << '{';
	for (auto &i : x)
		cerr << (f++ ? "," : ""), __print(i);
	cerr << "}";
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V>
void _print(T t, V... v)
{
	__print(t);
	if (sizeof...(v))
		cerr << ", ";
	_print(v...);
}
#ifndef ONLINE_JUDGE
#define debug(x...)               \
	cerr << "[" << #x << "] = ["; \
	_print(x)
#else
#define debug(x...)
#endif
#define IOS                  \
	ios::sync_with_stdio(0); \
	cin.tie(0);              \
	cout.tie(0);
#define endl "\n"
#define YES printf("YES\n")
#define NO printf("NO\n")
#define YES printf("YES\n")
#define NO printf("NO\n")
#define NOo printf("-1\n")
#define srt(x) sort(x.begin(), x.end())
#define rsrt(x) sort(x.rbegin(), x.rend())
#define ull unsigned long long
#define ll long long
#define pb push_back
#define ff first
#define ss second
#define all(x) x.begin(), x.end()
#define pii pair<int, int>
#define piii pair<int, pii>
#define min_heap priority_queue<int, vector<int>, greater<int>>
const ll mod = 1000000007;
const ll INF = 1e9;
const ll N = 10000007;
#define vll vector<long long>
#define mll map<long long, long long>
struct edge
{
	ll others;
	ll weight;
};
struct state
{
	ll dist;
	ll v;
	bool operator<(const state &o) const
	{
		if (dist != o.dist)
			return dist > o.dist;
		return v > o.v;
	}
};
vector<edge> adj[100010];
vll ans(100010, INF);
void Dijkstra(ll source)
{
	ans[source] = 0;
	priority_queue<state> pq;
	pq.push({0, source}); // dist,source
	while (!pq.empty())
	{
		state st = pq.top();
		pq.pop();
		if (st.dist > ans[st.v])
			continue;
		for (auto it : adj[st.v])
		{
			if (ans[it.others] > it.weight + st.dist)
			{
				ans[it.others] = it.weight + st.dist;
				pq.push({ans[it.others], it.others});
			}
		}
	}
}
void solve()
{
	ll ct = 0, i, a, b, wt, n, k, source, des, l;
	cin >> n >> k >> source;
	for (i = 0; i < k; i++)
	{
		cin >> a >> b >> wt;
		adj[a].pb({b, wt});
		adj[b].pb({a, wt});
	}
	cin >> l;
	Dijkstra(source);
	for (i = 1; i <= n; i++)
		if (ans[i] == l)
			ct++;
	for(i = 1; i <= n; i++)
	{
		if(ans[i] >= l)
		 continue;
		ll where = l - ans[i];
		for(auto it : adj[i])
		{
			if(where >= it.weight)
			  continue;
			if(l < ans[it.others] + it.weight - where)
			 ct++;
			if(l == ans[it.others] + it.weight - where && i <= it.others)
			 ct++;
		}
	}
	cout<<ct<<endl;
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	ll t = 1;
	// cin >> t;
	while (t--)
	{
		solve();
	}
}
